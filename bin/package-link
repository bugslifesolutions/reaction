#!/usr/bin/env bash

# Please Use Google Shell Style: https://google.github.io/styleguide/shell.xml

# ---- Start unofficial bash strict mode boilerplate
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -o errexit  # always exit on error
set -o errtrace # trap errors in functions as well
set -o pipefail # don't ignore exit codes when piping output
set -o posix    # more strict failures in subshells
# set -x          # enable debugging

IFS="$(printf "\n\t")"
# ---- End unofficial bash strict mode boilerplate

function execInContainer() {
  local command="cd /usr/local/src/app && $1"
  docker exec --user node  ${container_id} sh -c ${command}
}

function copy_package_to_container() {
  local package_name="$1"
  local package_path="$2"
  local container_destination_path="${container_copied_packages_path}/${package_name}"

  echo "Copying `${package_path}` package code into container to ${container_destination_path}..."
  execInContainer "mkdir -p ${container_destination_path}"
  docker cp "${package_path}/." "${container_id}:${container_destination_path}"
  echo "Publishing ${container_destination_path} to yalc store and updating all projects that reference it..."
  execInContainer "cd ${container_destination_path} && yalc push --files"
}

function add_and_link_package() {
  local package_name="$1"

  echo "Adding ${package_name} to package.json and linking to yalc file store"
  execInContainer "yalc add ${package_name}"
}

function link_package() {
  local package_name="$1"
  # Then yalc link into this project
  echo "Linking package ${package_name} into API..."
  execInContainer "cd /usr/local/src/app && yalc link ${package_name}"
}

function unlink_package() {
  local package_name="$1"
  echo "Unlinking package ${package_name} from API..."
  execInContainer "cd /usr/local/src/app && yalc remove ${package_name}"
  execInContainer "rm -rf /usr/local/src/app/node_modules/${package_name}"
}


package_name=$1
package_path=$2
yalc_packages_file_name="yalc-packages"
container_id="$(docker-compose ps -q api)"
container_copied_packages_path="/home/node/copied-packages"


if [[ -z "${package_name}" ]]; then
  if ! [[ -f "$yalc_packages_file_name" ]]; then
    echo "Yalc packages file doesn't exist. Creating..."
    cp "${yalc_packages_file_name}.example" ${yalc_packages_file_name}
  fi

  echo "Reading package list from ${yalc_packages_file_name}"

  while IFS== read -r path val; do
    action="$val"
    [[ $action == "true" ]] && action="link"
    [[ $action == "false" ]] && action="unlink"

    package_path="$path"
    package_name="$(node -p -e "JSON.parse(process.argv[1]).name" "$(cat ${package_path}/package.json)")"
    if [[ $package_name ]]; then
      if [[ $action == "unlink" ]]; then 
        unlink_package $package_name
      else 
        copy_package_to_container $package_name $package_path
        if [[ $action == "add" ]]; then 
          add_and_link_package $package_name
        fi
        if [[ $action == "link" ]]; then
          link_package $package_name
        fi
      fi
    fi
  done < "$yalc_packages_file_name"

  echo "Updating packages..."
  execInContainer "cd /usr/local/src/app && yalc update"
else
  if [[ -z "${package_path}" ]]; then
    package_name_without_org="${package_name/#@reactioncommerce\/}"
    package_path="../api-plugins/${package_name_without_org}"
    full_package_path="$(cd ${package_path} && pwd)"
    echo "\nUsing local package path ${full_package_path}"
    echo "If this is not correct, specify the correct path as the second argument.\n"
  fi
  copy_package_to_container $package_name $package_path
  link_package $package_name $package_path
fi

echo "Installing dependencies..."
execInContainer "npm i"

# Fool nodemon into thinking something has changed so that it restarts.
# Touch first file found in /src with .js extension
echo "Restarting API..."
execInContainer "touch -c $(ls ./src/*.js | head -n1)"
